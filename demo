#include<stdio.h>
#include<stdlib.h>
#include<dirent.h>

int main(int argc, char *argv[])
{
  DIR *dp ;// A pointer to a directory used with opendir()
  struct dirent *link; // A pointer to a directory entry used with readdir()
  
  if(argc < 2)
  {
  printf("Usage: %s <directory_name>\n",argv[0]);
  return 1;
  }
 
  dp = opendir(argv[1]);
  if(dp == NULL)
  {
  printf("ERROR: Unable to open directory %s\n",argv[1]);
  return 1;
  }

  printf(" Contents of the directory %s are:\n",argv[1]);
  while((link = readdir(dp)) != NULL)
  {
  printf("%s\n",link->d_name);
  }
  
  closedir(dp);
  return 0;
}





#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 1024

void usage(){
printf("Usage: ./program_name <filename> <searchstring>\n");
printf("Search for a string in a given text file.\n");
}

int main(int argc,char *argv[]){
FILE *fp;
char  fline[MAX];
char *newline;
int count=0;
int occurrences = 0;

if(argc != 3){
usage();
exit(1);
}

if(!(fp = fopen(argv[1],"r"))){
printf("grep: Could not open file: %s\n",argv[1]);
exit(1);
}

while(fgets(fline,MAX,fp)!= NULL){
count++;
if((newline = strchr(fline,'\n')))
{
*newline ='\0';
}
if(strstr(fline, argv[2]) != NULL)
{
printf("%s: %d %s\n",argv[1],count,fline);
occurrences++;
}
}
fclose(fp);
printf("\nTotal occurrences of '%s' : %d\n",argv[2],occurrences);
}






#include <stdio.h>
#include <stdlib.h>

void copy_file(const char *source, const char *destination) {
    FILE *src, *dest;
    char buffer[4096];
    size_t bytes;

    // Open the source file for reading
    src = fopen(source, "rb");
    if (src == NULL) {
        perror("Error opening source file");
        exit(EXIT_FAILURE);
    }

    // Open the destination file for writing
    dest = fopen(destination, "wb");
    if (dest == NULL) {
        perror("Error opening destination file");
        fclose(src);
        exit(EXIT_FAILURE);
    }

    // Copy data in chunks
    while ((bytes = fread(buffer, 1, sizeof(buffer), src)) > 0) {
        fwrite(buffer, 1, bytes, dest);
    }

    // Close the files
    fclose(src);
    fclose(dest);

    printf("File copied successfully from %s to %s\n", source, destination);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <source_file> <destination_file>\n", argv[0]);
        return EXIT_FAILURE;
    }

    copy_file(argv[1], argv[2]);

    return EXIT_SUCCESS;
}





#include <stdio.h>

struct Process {
    int id, burst_time, waiting_time, turnaround_time;
};

// Function to sort processes by burst time
void sortByBurstTime(struct Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].burst_time > p[j + 1].burst_time) {
                struct Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

// Function to calculate waiting and turnaround times
void calculateTimes(struct Process p[], int n) {
    p[0].waiting_time = 0;
    for (int i = 1; i < n; i++) {
        p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time;
    }
    for (int i = 0; i < n; i++) {
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
    }
}

// Function to display results
void display(struct Process p[], int n) {
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &p[i].burst_time);
    }

    sortByBurstTime(p, n);
    calculateTimes(p, n);
    display(p, n);

    return 0;
}





#include <stdio.h>
#include <sys/stat.h>
#include <time.h>

int main(int argc, char *argv[]) {
    struct stat fileStat;

    // Check if the filename is provided as a command-line argument
    if (argc < 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }

    // Get file statistics
    if (stat(argv[1], &fileStat) == -1) {
        perror("Error getting file info");
        return 1;
    }

    // Print file information
    printf("File: %s\n", argv[1]);
    printf("Size: %ld bytes\n", fileStat.st_size);
    printf("Permissions: %o (octal)\n", fileStat.st_mode & 0777);
    printf("Last modified: %s", ctime(&fileStat.st_mtime));

    return 0;
}






#include <stdio.h>
#include <dirent.h>

int main(int argc, char *argv[]) {
    DIR *dir;
    struct dirent *entry;

    // Check if the directory name is provided as a command-line argument
    if (argc < 2) {
        printf("Usage: %s <directory>\n", argv[0]);
        return 1;
    }

    // Open the directory
    dir = opendir(argv[1]);
    if (dir == NULL) {
        perror("Error opening directory");
        return 1;
    }

    printf("Contents of directory: %s\n", argv[1]);

    // Read and print directory entries
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // Close the directory
    closedir(dir);

    return 0;
}


